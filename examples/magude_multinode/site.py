from dtk.vector.species import set_species_param

# Add local Magude entomology parameters:
def add_magude_ento(cb):
    cb.update_params({'Vector_Species_Names': ['arabiensis', 'funestus']})

    # Arabiensis
    set_species_param(cb,
                      'arabiensis',
                      'Larval_Habitat_Types',
                      {
                          "LINEAR_SPLINE": {
                              "Capacity_Distribution_Number_Of_Years": 1,
                              "Capacity_Distribution_Over_Time": {
                                  "Times": [0.0, 30.417, 60.833, 91.25,
                                            121.667, 152.083, 182.5, 212.917,
                                            243.333, 273.75, 304.167, 334.583],
                                  "Values": [1] * 12
                              },
                              "Max_Larval_Capacity": pow(10, 8.5)
                          }
                      })

    # Funestus
    set_species_param(cb,
                      'funestus',
                      'Larval_Habitat_Types',
                      {
                          "WATER_VEGETATION": 2e3,
                          "LINEAR_SPLINE": {
                              "Capacity_Distribution_Number_Of_Years": 1,
                              "Capacity_Distribution_Over_Time": {
                                  "Times": [0.0, 30.417, 60.833, 91.25,
                                            121.667, 152.083, 182.5, 212.917,
                                            243.333, 273.75, 304.167, 334.583],
                                  "Values": [1] * 12
                              },
                              "Max_Larval_Capacity": pow(10, 7.5)
                          }
                      })



#
# def find_cells_for_this_catchment(catch, base='../../'):
#     # Find which grid cells correspond to a given HFCA
#     df = pd.read_csv(base + "data/mozambique/grid_lookup_with_neighborhood.csv")
#
#     if catch == 'all':
#         return np.array(df['grid_cell'])
#     else:
#         df_catch = df[df['catchment'] == catch]
#         return np.array(df_catch['grid_cell'])
#
#
# def find_pops_for_catch(catch, base='../../'):
#     cells = find_cells_for_this_catchment(catch, base=base)
#
#     pop_df = pd.read_csv(base + "data/mozambique/grid_population")
#
#     return np.array(pop_df[np.in1d(pop_df['node_label'] ,cells)]['pop'])
#
#
#
# def find_bairros_for_this_catchment(catch, base='../../'):
#     bairro_csv = base + "data/mozambique/grid_lookup_with_neighborhood.csv"
#     bairro_data = pd.read_csv(bairro_csv)
#
#     return_data = bairro_data[bairro_data["catchment" ]== catch]
#     return return_data
#
#
#
# def catch_3_yr_spline(catch, species, dropbox_base="C:/Users/jsuresh/Dropbox (IDM)/Malaria Team Folder/projects/Mozambique/entomology_calibration/"):
#     # Read spline directly from mini-CSV files generated by Jaline/Caitlin
#
#     def load_raw_spline(csv_df):
#         spline = np.zeros(36)
#         raw_spline = np.array(csv_df["Values"])
#         spline[4:35] = raw_spline[1:-1] # Throw out first and last entry
#         return spline
#
#     def fill_out_spline(spline):
#         spline[0:4] = 0.5 * (spline[12:16] + spline[24:28])
#         spline[35] = 0.5 * (spline[11]+spline[23])
#         return spline
#     # def fill_out_spline(spline):
#     #     # Account for the fact that we only really trust the data from indices 4-35 (May 15 - Nov 17)
#     #     # Reconstruct shape and amplitude of missing data by inferring from other
#     #     year1_factor = spline[4:11].sum()
#     #     year2_factor = spline[16:23].sum()
#     #     year3_factor = spline[28:35].sum()
#     #
#     #     spline_inferred = spline.copy()
#     #
#     #     spline_inferred[0:4] = year1_factor * 0.5 * (spline[12:16] / year2_factor + spline[24:28] / year3_factor)
#     #     spline_inferred[35] = year3_factor * 0.5 * (spline[11] / year1_factor + spline[23] / year2_factor)
#     #
#     #     return spline_inferred
#
#
#     ento_base = dropbox_base + "Multi_year_calibration_by_HFCA_180404/best_180410/"
#     # ento_base = dropbox_base + "Multi_year_calibration_by_HFCA_180404/best_180409/"
#
#
#
#     if species == "arabiensis":
#         species = "gambiae"
#
#
#     if species == "funestus":
#         df = pd.read_csv(ento_base + "funestus.csv")
#         spline = fill_out_spline(load_raw_spline(df))
#     elif species == "gambiae":
#         if catch == "Panjane-Caputine":
#             df = pd.read_csv(ento_base + "{}_{}.csv".format("Panjane", species))
#             spline = fill_out_spline(load_raw_spline(df))
#         elif catch == "Magude-Sede-Facazissa":
#             df = pd.read_csv(ento_base + "{}_{}.csv".format("Magude-Sede", species))
#             spline = fill_out_spline(load_raw_spline(df))
#         elif catch != "Moine" and catch != "Mahel":
#             df = pd.read_csv(ento_base + "{}_{}.csv".format(catch, species))
#             spline = fill_out_spline(load_raw_spline(df))
#         elif catch == "Moine" or catch == "Mahel":
#             panjane_df = pd.read_csv(ento_base + "{}_{}.csv".format("Panjane", species))
#             chichuco_df = pd.read_csv(ento_base + "{}_{}.csv".format("Chichuco", species))
#             panjane_spline = fill_out_spline(load_raw_spline(panjane_df))
#             chichuco_spline = fill_out_spline(load_raw_spline(chichuco_df))
#
#             spline = (panjane_spline + chichuco_spline)/2.
#
#     # Return associated times:
#     times_1yr = np.array([0.0, 30.417, 60.833, 91.25, 121.667, 152.083, 182.5, 212.917, 243.333, 273.75, 304.167, 334.583])
#     times = np.append(times_1yr, times_1yr + 365)
#     times = np.append(times, times_1yr + 365 * 2)
#     times = list(times)
#
#     return [times, list(spline)]
#
#
#
#
#
# def catch_3_yr_spline_GatesReview(catch, species, dropbox_base="C:/Users/jsuresh/Dropbox (IDM)/Malaria Team Folder/projects/Mozambique/entomology_calibration/"):
#     # Read spline directly from mini-CSV files generated by Jaline/Caitlin
#
#     def load_raw_spline(csv_df):
#         spline = np.zeros(36)
#         raw_spline = np.array(csv_df["Values"])
#         spline[4:35] = raw_spline[1:-1] # Throw out first and last entry
#         return spline
#
#     def fill_out_spline(spline):
#         spline[0:4] = 0.5 * (spline[12:16] + spline[24:28])
#         spline[35] = 0.5 * (spline[11]+spline[23])
#         return spline
#     # def fill_out_spline(spline):
#     #     # Account for the fact that we only really trust the data from indices 4-35 (May 15 - Nov 17)
#     #     # Reconstruct shape and amplitude of missing data by inferring from other
#     #     year1_factor = spline[4:11].sum()
#     #     year2_factor = spline[16:23].sum()
#     #     year3_factor = spline[28:35].sum()
#     #
#     #     spline_inferred = spline.copy()
#     #
#     #     spline_inferred[0:4] = year1_factor * 0.5 * (spline[12:16] / year2_factor + spline[24:28] / year3_factor)
#     #     spline_inferred[35] = year3_factor * 0.5 * (spline[11] / year1_factor + spline[23] / year2_factor)
#     #
#     #     return spline_inferred
#
#
#     ento_base = dropbox_base + "Multi_year_calibration_by_HFCA_180404/best_180410/"
#     # ento_base = dropbox_base + "Multi_year_calibration_by_HFCA_180404/best_180409/"
#
#
#
#     if species == "arabiensis":
#         species = "gambiae"
#
#
#     if species == "funestus":
#         df = pd.read_csv(ento_base + "funestus.csv")
#         spline = fill_out_spline(load_raw_spline(df))
#     elif species == "gambiae":
#         if catch == "Panjane-Caputine":
#             df = pd.read_csv(ento_base + "{}_{}.csv".format("Panjane", species))
#             spline = fill_out_spline(load_raw_spline(df))
#         elif catch == "Magude-Sede-Facazissa":
#             df = pd.read_csv(ento_base + "{}_{}.csv".format("Magude-Sede", species))
#             spline = fill_out_spline(load_raw_spline(df))
#         elif catch != "Moine" and catch != "Mahel":
#             df = pd.read_csv(ento_base + "{}_{}.csv".format(catch, species))
#             spline = fill_out_spline(load_raw_spline(df))
#         elif catch == "Moine" or catch == "Mahel":
#             panjane_df = pd.read_csv(ento_base + "{}_{}.csv".format("Panjane", species))
#             chichuco_df = pd.read_csv(ento_base + "{}_{}.csv".format("Chichuco", species))
#             panjane_spline = fill_out_spline(load_raw_spline(panjane_df))
#             chichuco_spline = fill_out_spline(load_raw_spline(chichuco_df))
#
#             spline = (panjane_spline + chichuco_spline)/2.
#
#     # Return associated times:
#     times_1yr = np.array([0.0, 30.417, 60.833, 91.25, 121.667, 152.083, 182.5, 212.917, 243.333, 273.75, 304.167, 334.583])
#     times = np.append(times_1yr, times_1yr + 365)
#     times = np.append(times, times_1yr + 365 * 2)
#     times = list(times)
#
#     return [times, list(spline)]